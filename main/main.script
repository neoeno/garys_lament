local _ = require "vendor/moses"
local C = require "main/constants"
local Map = require "lib/map"
local Space = require "lib/space"
local timer = require "vendor/timer"

local level = require "levels/level_2/level_2"
local input_manager = require "managers/input_manager"
local position_manager = require "managers/position_manager"

local player = position_manager.player_state()
local timers = {}
local transient_object_ids = {}

function init(self)
    msg.post("/camera#camera", "acquire_camera_focus")
    msg.post(".", "acquire_input_focus")

    sprite.set_constant("/barbican__flat__bedroom#map", "tint", C.OFF_TINT)
    sprite.set_constant("/barbican__flat__lounge#map", "tint", C.OFF_TINT)
    sprite.set_constant("/barbican__corridor#map", "tint", C.OFF_TINT)
    sprite.set_constant("/"..level.get_map_layer_name().."#map", "tint", C.ON_TINT)
    sprite.set_constant("/player#sprite", "tint", C.ON_TINT)

    render_map(level.get_map_layer_name())

    local pos = go.get_position("/player")
    position_manager.set_player_position({
        tx = Space.px_to_tx(pos.x),
        ty = Space.py_to_ty(pos.y),
        orientation = "south"
    });
end

function render_map(map_name)
    go.delete_all(transient_object_ids)
    transient_object_ids = {}
    level.change_map(map_name)
    for i, npc in pairs(level.get_npcs()) do
        local target_pos = Map.map_pos_to_game_pos(npc)
        local pos = vmath.vector3(target_pos.x, target_pos.y, 1)
        local created_objects = collectionfactory.create("#npc_factory", pos)
        msg.post(created_objects["/sprite"], "set_text_id", {text_id = npc.text_id})
        transient_object_ids = _.append(transient_object_ids, _.values(created_objects))
    end
end

function update(self, dt)
    timer.update(timers, dt)
end

function on_input(self, action_id, action)
    input_manager.accept_input(action_id, action)
    if player:can('engage') and input_manager.pop_engagement_intent() then
        respond_to_engagement_intent()
    elseif player:can('walk') then
        if input_manager.has_movement_intent() then
            local movement_intent = input_manager.get_movement_intent()
            respond_to_movement_intent(movement_intent)
        end
        update_player_animation()
    end
end

function respond_to_movement_intent(movement_intent)
    local player_pos = position_manager.get_player_position()
    local intended_position = Space.position_after_movement(player_pos, movement_intent)
    position_manager.set_orientation(Space.movement_orientation(movement_intent))
    if Map.position_is_walkable(level.get_map(), level.get_npcs(), intended_position) then
        player:walk(movement_intent)
        animate_player_movement(function()
            player:halt()
            update_player_animation()
        end)
    elseif Map.is_portal_at(level.get_map(), intended_position) then
        if position_manager.get_player_position().orientation == "north" then
            player:walk(movement_intent)
            animate_player_movement(function()
                player:halt()
                update_player_animation("standing_north")
                follow_portal(Map.portal_at(level.get_map(), intended_position))
            end)
        else
            follow_portal(Map.portal_at(level.get_map(), intended_position))
        end
    end
end

function respond_to_engagement_intent()
    if player:is('engaging') then
        msg.post("/dialog#gui", "advance_text_sequence")
    elseif player:can('engage') then
        broadcast_to_engagables("engage_with_tile", {position = Space.position_facing(position_manager.get_player_position())})
    end
end

function broadcast_to_engagables(message_id, message)
    msg.post("#talkers", message_id, message)
    for i, object_id in pairs(transient_object_ids) do
        msg.post(object_id, message_id, message)
    end
end

function on_message(self, message_id, message, sender)
    if message_id == hash("play_text") then
        player:engage()
        msg.post("/dialog#gui", "start_text_sequence", {text = message.text})
    elseif message_id == hash("engagement_end") then
        player:disengage()
    end
end

function follow_portal(portal)
    portal_animate(
        function()
            player:teleport()
        end,
        function()
            render_map(portal.map)
            position_manager.set_player_position(portal.position);
            update_position()
        end,
        function()
            player:appear()
            if position_manager.get_player_position().orientation == "south" then
                respond_to_movement_intent(C.ORIENTATION_TO_MOVEMENT["south"])
                update_player_animation()
            end
        end
    )
end

function step_animate(frame_interval, fns)
    timer.frames(timers, frame_interval, function()
        fns[1]()
        if #fns > 1 then
            step_animate(frame_interval, _.rest(fns, 2))
        end
    end)
end

function portal_animate(beginning, middle, ending)
    beginning()
    step_animate(5, {
        set_screen_tint_fn(C.SHADE_TINT_3),
        set_screen_tint_fn(C.SHADE_TINT_2),
        set_screen_tint_fn(C.SHADE_TINT_1),
        _.compose(middle, set_screen_tint_fn(C.OFF_TINT)),
        set_screen_tint_fn(C.SHADE_TINT_2),
        set_screen_tint_fn(C.SHADE_TINT_3),
        _.compose(ending, set_screen_tint_fn(C.ON_TINT))
    })
end

function set_screen_tint_fn(tint)
    return function()
        sprite.set_constant("/"..level.get_map_layer_name().."#map", "tint", tint)
        sprite.set_constant("/player#sprite", "tint", tint)
    end
end

function animate_player_movement(fn)
    local player_pos = position_manager.get_player_position()
    local pos = go.get_position("/player")
    go.animate("/player", "position.x", go.PLAYBACK_ONCE_FORWARD, Space.tx_to_px(player_pos.tx), go.EASING_LINEAR, 0.27)
    go.animate("/player", "position.y", go.PLAYBACK_ONCE_FORWARD, Space.ty_to_py(player_pos.ty), go.EASING_LINEAR, 0.27, 0, fn)
end

local current_player_animation_id = "standing_south";
function update_player_animation(forceAnimation)
    local animation_id
    if forceAnimation == nil then
        local disposition = (player:is("walking")
                             or (
                                not player:is("teleporting")
                                and input_manager.has_movement_intent())
                            ) and "walking" or "standing"
        local orientation = position_manager.get_player_position().orientation
        animation_id = (disposition .. "_" .. orientation)
    else
        animation_id = forceAnimation
    end
    if current_player_animation_id == animation_id then return end
    current_player_animation_id = animation_id
    msg.post("/player#sprite", "play_animation", {id = hash(animation_id)})
end

function update_position()
    local player_pos = position_manager.get_player_position()
    local pos = go.get_position("/player#sprite")
    pos.x = Space.tx_to_px(player_pos.tx)
    pos.y = Space.ty_to_py(player_pos.ty)
    go.set_position(pos, "/player")
end
